{
  "$schema": "http://json-schema.org/draft-07/schema",
  "definitions": {
    "meta": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/metaValue"
      }
    },
    "metaValue": {
      "type": "object",
      "description": "Metadata in the form of a key-value pair.",
      "required": ["kind", "key", "value"],
      "properties": {
        "kind": { "type": "string", "const": "MetaValue" },
        "key": {
          "description": "The key of the metadata value.",
          "$ref": "#/definitions/string"
        },
        "value": {
          "description": "An untyped literal value. Implementations MUST NOT assume any particular type for this value.",
          "type": "object",
          "required": ["kind", "value"],
          "title": "UntypedLiteral",
          "properties": {
            "kind": { "type": "string", "const": "UntypedLiteral" },
            "value": {},
            "loc": {
              "description": "The encoded location of the untyped literal value in the source document(s).",
              "type": "string"
            }
          }
        }
      }
    },

    "service": {
      "type": "object",
      "title": "Service",
      "description": "The `Service` object is the root of a Basketry Intermediate Representation (IR) document. It defines the core attributes of an API service, including its name, version, source documents, and all types and interfaces it contains. The `Service` object provides a canonical, language-agnostic model of the service definition that plugins such as generators and rules can consume without requiring access to the original source files.",
      "required": [
        "kind",
        "basketry",
        "title",
        "majorVersion",
        "sourcePaths",
        "interfaces",
        "types",
        "enums",
        "unions"
      ],
      "properties": {
        "$schema": { "type": "string" },
        "kind": { "type": "string", "const": "Service" },
        "basketry": {
          "description": "This string MUST be the version number of the Basketry Specification that the Intermediate Representation uses. The `basketry` field SHOULD be used by tooling to interpret the IR document. This is not related to the Service `majorVersion` string.",
          "type": "string",
          "const": "0.2"
        },
        "title": {
          "description": "The title of the service",
          "$ref": "#/definitions/string"
        },

        "majorVersion": {
          "description": "The major version of the Service (which is distinct from the Basketry Specification version).",
          "$ref": "#/definitions/integer"
        },
        "sourcePaths": {
          "type": "array",
          "description": "An array of paths to the original source documents for this service. These paths are relative to the directory of the config file that produced the IR. All locations in the Intermediate Representation refer to ranges within these source documents.",
          "items": { "type": "string" }
        },
        "interfaces": {
          "description": "An array of Interfaces defined in this Service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/interface"
          }
        },
        "types": {
          "description": "An array of Types defined in this Service.",
          "type": "array",
          "items": { "$ref": "#/definitions/type" }
        },
        "enums": {
          "description": "An array of Enums defined in this Service.",
          "type": "array",
          "items": { "$ref": "#/definitions/enum" }
        },
        "unions": {
          "description": "An array of Unions defined in this Service.",
          "type": "array",
          "items": { "$ref": "#/definitions/union" }
        },
        "loc": {
          "description": "The encoded location of the service in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the service.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "severity": {
      "type": "string",
      "enum": ["error", "warning", "info"]
    },
    "violation": {
      "type": "object",
      "description": "A Violation represents a problem encountered during parsing or rule evaluation. It includes metadata to help developers and systems pinpoint and understand issues within the source document.",
      "required": ["sourcePath", "range", "message", "severity", "code"],
      "properties": {
        "sourcePath": {
          "description": "The path to the source document that contains the violation. This path is relative to the project directory.",
          "type": "string"
        },
        "range": {
          "description": "The range of the violation in the source document.",
          "$ref": "#/definitions/range"
        },
        "message": {
          "description": "A human-readable explanation of the violation, suitable for display in CLI output, logs, or developer tools.",
          "type": "string"
        },
        "severity": {
          "description": "Indicates the impact of the violation. Use `\"error\"` for blocking issues, `\"warning\"` for non-blocking recommendations, and `\"info\"` for helpful guidance.",
          "$ref": "#/definitions/severity"
        },
        "code": {
          "description": "A unique identifier for the type of violation. This value SHOULD be a short, machine-readable string that can be used to identify the violation.",
          "type": "string"
        },
        "link": {
          "description": "A URL that provides additional documentation or context for the violation. MUST be a valid URI if provided. Useful for pointing to rule definitions, spec references, or troubleshooting guides.",
          "type": "string"
        }
      }
    },
    "range": {
      "type": "object",
      "description": "The `Range` object defines a span within a source document. A `Range` is the decoded representation of the `loc` property found in the `Service` IR and provides precise information about where a violation or element occurs in the source text.",
      "required": ["start", "end"],
      "properties": {
        "start": {
          "description": "The position of the first character in the range.",
          "$ref": "#/definitions/position"
        },
        "end": {
          "description": "The position of the last character in the range.",
          "$ref": "#/definitions/position"
        }
      }
    },
    "position": {
      "type": "object",
      "description": "The `Position` object defines a single point in a source document.",
      "required": ["line", "column", "offset"],
      "properties": {
        "line": {
          "description": "The 1-based line number of the position. The first line in a document is `1`.",
          "type": "integer"
        },
        "column": {
          "description": "The 1-based column number of the position within the line. The first column is `1`.",
          "type": "integer"
        },
        "offset": {
          "description": "The 0-based character offset from the start of the document. The first character is `0`.",
          "type": "integer"
        }
      }
    },

    "requestId": {
      "description": "A request id",
      "oneOf": [{ "type": "string" }, { "type": "number" }]
    },
    "errorResponse": {
      "type": "object",
      "description": "The `ErrorResponse` object defines the structure of a JSON-RPC response returned when a request fails. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and conveys error information instead of a result.",
      "required": ["jsonrpc", "id", "error"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "Echoes the ID of the corresponding request. Used by the caller to correlate responses. If the request could not be parsed, this value SHOULD be `null`.",
          "oneOf": [
            { "type": "string" },
            { "type": "number" },
            { "type": "null" }
          ]
        },
        "error": {
          "description": "The error object providing details about the failure.",
          "$ref": "#/definitions/rpcError"
        }
      }
    },
    "rpcError": {
      "type": "object",
      "required": ["code", "message"],
      "properties": {
        "code": {
          "description": "A machine-readable error code that identifies the type of error. Codes SHOULD follow the [JSON-RPC 2.0 standard error codes](https://www.jsonrpc.org/specification#error_object) when applicable, but MAY include custom values for Basketry-specific conditions.",
          "type": "integer"
        },
        "message": {
          "description": "A short human-readable description of the error. The message SHOULD be limited to a concise single sentence.",
          "type": "string"
        },
        "data": {
          "description": "An optional value that contains additional information about the error. The structure of this value MAY be determined by the plugin."
        }
      }
    },
    "basketryContext": {
      "type": "object",
      "description": "The Basketry context provides metadata about the current Basketry execution environment. This context is useful for resolving relative paths, debugging plugin behavior, or adapting plugin behavior based on CLI invocation details.",
      "required": ["configuration", "projectDirectory"],
      "properties": {
        "configPath": {
          "description": "Absolute path to the Basketry configuration file that initiated this run.",
          "type": "string"
        },
        "projectDirectory": {
          "description": "Absolute path to the root of the Basketry project. All relative paths (e.g. source files, outputs) are resolved against this directory.",
          "type": "string"
        }
      }
    },

    "parserContext": {
      "type": "object",
      "description": "The Parser context object provides the core input to the plugin's parser: the raw source file and its path. This context isolates the entrypoint file that should be parsed and serves as the root for resolving any references to additional files (if applicable).",
      "required": ["sourcePath", "sourceContent"],
      "properties": {
        "sourcePath": {
          "description": "The relative path to the entrypoint file, from the root of the project directory.",
          "type": "string"
        },
        "sourceContent": {
          "description": "The full text content of the entrypoint file.",
          "type": "string"
        }
      }
    },
    "parseRequest": {
      "type": "object",
      "description": "The `ParseRequest` object defines the structure of a JSON-RPC request for invoking the `basketry.parse` method. This method is called by the Basketry CLI or orchestrator to initiate parsing of one or more input files by a plugin. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and includes metadata and parameters needed to perform the parse operation.",
      "required": ["jsonrpc", "id", "method", "params"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "A unique identifier for this request. The response from the plugin will include this same ID, allowing the caller to correlate requests and responses.",
          "$ref": "#/definitions/requestId"
        },
        "method": {
          "type": "string",
          "description": "The name of the RPC method to invoke.",
          "const": "basketry.parse"
        },
        "params": {
          "description": "The parameters specific to the parse operation.",
          "$ref": "#/definitions/parseParams"
        }
      }
    },
    "parseParams": {
      "type": "object",
      "description": "The input payload passed to a plugin’s `basketry.parse` method. This object contains both the raw content to be parsed and metadata about the execution environment. Plugin authors should use this object to extract all necessary information to perform the parse operation.",
      "required": ["context", "basketry"],
      "properties": {
        "context": {
          "description": "Contains the source text and its associated file path. This is the content the plugin is expected to parse.",
          "$ref": "#/definitions/parserContext"
        },
        "basketry": {
          "description": "Contains runtime metadata.",
          "$ref": "#/definitions/basketryContext"
        }
      }
    },
    "parseResponse": {
      "type": "object",
      "description": "The Parse response object represents the response payload returned from a plugin’s `basketry.parse` method. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and contains the result of the parsing operation including both the produced service definition and any violations encountered.",
      "required": ["jsonrpc", "id", "result"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "Echoes the ID of the corresponding request. Used by the caller to correlate responses.",
          "$ref": "#/definitions/requestId"
        },
        "result": {
          "description": "The result of the parse operation, including a service definition (if successful) and a list of violations (if any).",
          "$ref": "#/definitions/parseResult"
        }
      }
    },
    "parseResult": {
      "type": "object",
      "description": "The parse result object encapsulates the output of a parsing operation. This includes the intermediate representation (IR) of the parsed service and any violations reported during the parsing process.",
      "required": ["violations"],
      "properties": {
        "service": {
          "description": "The parsed intermediate representation of the service. This is the structured output that downstream Basketry components will consume. This field is typically `undefined` if parsing fails entirely",
          "$ref": "#/definitions/service"
        },
        "violations": {
          "type": "array",
          "description": "A list of violations encountered during parsing. Even if parsing is successful, this array may include warnings or informational messages to aid in debugging or quality assurance. If no issues were found, this should be an empty array.",
          "items": { "$ref": "#/definitions/violation" }
        }
      }
    },

    "ruleContext": {
      "type": "object",
      "description": "The `RuleContext` object provides the inputs that a rule evaluates during validation.",
      "required": ["service"],
      "properties": {
        "service": {
          "description": "The intermediate representation (IR) of the service, produced by a parser. This is the input that rules validate against.",
          "$ref": "#/definitions/service"
        },
        "options": {
          "description": "Rule-specific configuration values. The structure and semantics of this field are defined by the rule itself. If omitted, empty, or improperly structured, the rule MUST apply its default behavior"
        }
      }
    },
    "validateRequest": {
      "type": "object",
      "description": "The `ValidateRequest` object defines the structure of a JSON-RPC request for invoking the `basketry.validate` method. This method is called by the Basketry CLI or orchestrator to execute one or more rules against a parsed `Service`. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and includes metadata and parameters needed to perform the validation operation.",
      "required": ["jsonrpc", "id", "method", "params"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "A unique identifier for this request. The response from the plugin will include this same ID, allowing the caller to correlate requests and responses.",
          "$ref": "#/definitions/requestId"
        },
        "method": {
          "type": "string",
          "description": "The name of the RPC method to invoke.",
          "const": "basketry.validate"
        },
        "params": {
          "description": "The parameters specific to the validate operation.",
          "$ref": "#/definitions/validateParams"
        }
      }
    },
    "validateParams": {
      "type": "object",
      "description": "The `ValidateParams` object defines the input parameters passed to the `basketry.validate` method.",
      "required": ["context", "basketry"],
      "properties": {
        "context": {
          "description": "Contains the `Service` to be validated and any rule-specific options.",
          "$ref": "#/definitions/ruleContext"
        },
        "basketry": {
          "description": "Contains runtime metadata.",
          "$ref": "#/definitions/basketryContext"
        }
      }
    },
    "validateResponse": {
      "type": "object",
      "description": "The `ValidateResponse` object represents the response payload returned from the `basketry.validate` method. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and contains the result of executing a rule against a service definition.",
      "required": ["jsonrpc", "id", "result"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "Echoes the ID of the corresponding request. Used by the caller to correlate responses.",
          "$ref": "#/definitions/requestId"
        },
        "result": {
          "description": "The outcome of the validation, including all violations produced by the rule.",
          "$ref": "#/definitions/validateResult"
        }
      }
    },
    "validateResult": {
      "type": "object",
      "description": "The `ValidateResult` object encapsulates the outcome of a rule’s validation run.",
      "required": ["violations"],
      "properties": {
        "violations": {
          "type": "array",
          "description": "A list of violations produced by the rule. If no violations are found, this array MUST be empty.",
          "items": { "$ref": "#/definitions/violation" }
        }
      }
    },

    "file": {
      "type": "object",
      "description": "The `File` object represents a single file produced by a generator.",
      "required": ["path", "contents"],
      "properties": {
        "path": {
          "description": "The path to the file, relative to the project directory. This MUST include the file name and extension. The array form allows paths to be represented in a normalized, platform-independent manner (e.g., [\"src\", \"models\", \"user.ts\"]).",
          "type": "array",
          "items": { "type": "string" }
        },
        "contents": {
          "description": "The complete textual contents of the file. Generators MUST encode the entire file body as a UTF-8 string.",
          "type": "string"
        }
      }
    },
    "generatorContext": {
      "type": "object",
      "description": "The `GeneratorContext` object provides the inputs required by a generator to produce output artifacts.",
      "required": ["service"],
      "properties": {
        "service": {
          "description": "The intermediate representation (IR) of the service, produced by a parser. This is the input used by the generator to create code, documentation, or other artifacts.",
          "$ref": "#/definitions/service"
        },
        "options": {
          "description": "Generator-specific configuration values. The structure and semantics of this field are defined by the generator itself. If omitted, empty, or improperly structured, the generator MUST apply its default behavior"
        }
      }
    },
    "generateRequest": {
      "type": "object",
      "description": "The `GenerateRequest` object defines the structure of a JSON-RPC request for invoking the `basketry.generate` method. This method is called by the Basketry CLI or orchestrator to execute one or more generators against a parsed `Service`. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and includes metadata and parameters needed to perform the generation operation.",
      "required": ["jsonrpc", "id", "method", "params"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "A unique identifier for this request. The response from the plugin will include this same ID, allowing the caller to correlate requests and responses.",
          "$ref": "#/definitions/requestId"
        },
        "method": {
          "type": "string",
          "description": "The name of the RPC method to invoke.",
          "const": "basketry.generate"
        },
        "params": {
          "description": "The parameters specific to the generate operation.",
          "$ref": "#/definitions/generateParams"
        }
      }
    },
    "generateParams": {
      "type": "object",
      "description": "The `GenerateParams` object defines the input parameters passed to the `basketry.generate` method. It provides the generator with the service definition to render.",
      "required": ["context", "basketry"],
      "properties": {
        "context": {
          "description": "Contains the parsed `Service` and generator-specific options. This is the primary input for code generation.",
          "$ref": "#/definitions/generatorContext"
        },
        "basketry": {
          "description": "Contains runtime metadata.",
          "$ref": "#/definitions/basketryContext"
        }
      }
    },
    "generateResponse": {
      "type": "object",
      "description": "The `GenerateResponse` object represents the response payload returned from the `basketry.generate` method. It adheres to the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification) and contains the files produced by the generator.",
      "required": ["jsonrpc", "id", "result"],
      "properties": {
        "jsonrpc": {
          "type": "string",
          "description": "The JSON-RPC protocol version.",
          "const": "2.0"
        },
        "id": {
          "description": "Echoes the ID of the corresponding request. Used by the caller to correlate responses.",
          "$ref": "#/definitions/requestId"
        },
        "result": {
          "description": "The outcome of the generation operation, including all files produced.",
          "$ref": "#/definitions/generateResult"
        }
      }
    },
    "generateResult": {
      "type": "object",
      "description": "The `GenerateResult` object encapsulates the output of a generator.",
      "required": ["files"],
      "properties": {
        "files": {
          "type": "array",
          "description": "An array of files produced by the generator. If no files are generated, this array MUST be empty.",
          "items": { "$ref": "#/definitions/file" }
        }
      }
    },

    "interface": {
      "type": "object",
      "description": "An Interface defines a cohesive set of related methods that collectively represent a functional contract within a service. Interfaces act as the primary grouping mechanism for operations and are protocol-agnostic by default. They provide a stable, language-neutral abstraction of service capabilities, ensuring that tooling can target a wide range of programming languages and frameworks without losing semantic meaning.",
      "required": ["kind", "name", "methods"],
      "properties": {
        "kind": { "type": "string", "const": "Interface" },
        "name": {
          "$ref": "#/definitions/string",
          "description": "The name of the interface. This name MUST be unique within the Service. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way."
        },
        "description": {
          "description": "An array of strings that describe the interface. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "methods": {
          "description": "An array of methods defined by this interface.",
          "type": "array",
          "items": { "$ref": "#/definitions/method" }
        },
        "protocols": {
          "description": "Any protocol-specific information about the interface. This information is not part of the core interface structure and definition, but MAY be used by tooling to generate code for specific protocols.",
          "$ref": "#/definitions/protocols"
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the interface is deprecated.",
          "$ref": "#/definitions/true"
        },
        "meta": {
          "description": "An array of metadata values for the interface.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "method": {
      "type": "object",
      "description": "A Method defines a single operation that can be performed on a service. Methods are the primary means of interacting with a service and are associated with a specific interface. They define the input parameters, output values, and any security requirements for executing the operation.",
      "required": ["kind", "name", "security", "parameters"],
      "properties": {
        "kind": { "type": "string", "const": "Method" },
        "name": {
          "description": "The name of the method. This name MUST be unique within the Service. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "description": "An array of strings that describe the interface. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "parameters": {
          "description": "An array of parameters that are required for the method. Each parameter defines its own name, value definition, and optional constraints.",
          "type": "array",
          "items": { "$ref": "#/definitions/parameter" }
        },
        "security": {
          "type": "array",
          "items": { "$ref": "#/definitions/securityOption" }
        },
        "returns": {
          "description": "The value that is returned by the method. This value is defined by the method’s return type.",
          "$ref": "#/definitions/returnValue"
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the method is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the method in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the method.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "parameter": {
      "type": "object",
      "description": "A Parameter defines an input value accepted by a method. Parameters define the contract for the information a method caller MUST (or MAY) provide, ensuring consistent behavior across all implementations of the service.",
      "required": ["kind", "name", "value"],
      "properties": {
        "kind": { "type": "string", "const": "Parameter" },
        "name": {
          "description": "The name of the parameter. This name MUST be unique within the method. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "description": "An array of strings that describe the parameter. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "value": {
          "description": "The value of the parameter. This value defines the data shape and constraints for the parameter.",
          "$ref": "#/definitions/memberValue"
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the parameter is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the parameter in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the parameter.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "returnValue": {
      "type": "object",
      "description": "A ReturnValue defines the output produced by a method, specifying the value’s data shape and constraints.",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "ReturnValue" },
        "value": {
          "description": "The value that is returned by the method. This value defines the data shape and constraints for the return value.",
          "$ref": "#/definitions/memberValue"
        },
        "loc": {
          "description": "The encoded location of the return value in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the return value.",
          "$ref": "#/definitions/meta"
        }
      }
    },

    "type": {
      "type": "object",
      "description": "A Type defines the structure of a data shape used within a service. Types are reusable, named contracts that describe how data is organized and validated across interfaces and methods. They provide a stable, language-neutral representation of complex data models, allowing tooling to interact iwth strongly typed artifacts in any target language while preserving the semantics and constraints defined in the original service description",
      "required": ["kind", "name", "properties", "rules"],
      "properties": {
        "kind": { "type": "string", "const": "Type" },
        "name": {
          "description": "The name of the type. This name MUST be unique within the Service across all other types, enums, and unions. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "description": "An array of strings that describe the type. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the type is deprecated.",
          "$ref": "#/definitions/true"
        },
        "properties": {
          "description": "An array of named properties that make up the structure of the type. Each property has its own name, value definition, and optional constraints. Properties SHOULD be used when the type’s structure is defined by a fixed set of known field names.",
          "type": "array",
          "items": { "$ref": "#/definitions/property" }
        },
        "mapProperties": {
          "description": "An optional set of allowed key and value shapes when the type represents a dynamic map or dictionary rather than a fixed set of fields. Map properties SHOULD be used when the type’s structure is defined by arbitrary keys whose values share a common schema.",
          "$ref": "#/definitions/mapProperties"
        },
        "rules": {
          "description": "A set of constraints that apply to the overall structure of the type. These rules are specific to the type itself and are distinct from rules that apply to property definitions.",
          "type": "array",
          "items": { "$ref": "#/definitions/objectValidationRule" }
        },
        "loc": {
          "description": "The encoded location of the type in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the type.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "property": {
      "type": "object",
      "description": "A Property defines a named field within a type, representing a fixed part of that type’s structure. Each property specifies the field’s name, its data shape, and optional descriptive context. Properties are used when the set of field names is known in advance and does not vary between instances of the type.",
      "required": ["kind", "name", "value"],
      "properties": {
        "kind": { "type": "string", "const": "Property" },
        "name": {
          "description": "The name of the property. This name MUST be unique within a type. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "description": "An array of strings that describe the property. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "value": {
          "description": "The value of the property. This value defines the data shape and constraints for the property.",
          "$ref": "#/definitions/memberValue"
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the property is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the property in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the property.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "mapProperties": {
      "type": "object",
      "description": "Map properties define the allowed shape for values associated with dynamically named keys in a type. They are used when the set of field names is not known in advance, allowing instances of the type to contain any number of keys that conform to a shared schema. Unlike properties, which represent explicitly named fields that are the same for all instances of a type, map properties describe rules for dynamically named fields that may vary between instances.",
      "required": ["kind", "key", "requiredKeys", "value"],
      "properties": {
        "kind": { "type": "string", "const": "MapProperties" },
        "key": {
          "description": "The shape of the keys that are allowed in the map. This value defines the data shape and constraints for the map keys.",
          "$ref": "#/definitions/mapKey"
        },
        "requiredKeys": {
          "description": "An array of key names that MUST be present in every instance of the map. Each entry specifies a required key that MUST conform to the map’s value definition. The array MAY be empty.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "value": {
          "description": "The shape of the values that are allowed in the map. This value defines the data shape and constraints for the map values.",
          "$ref": "#/definitions/mapValue"
        },
        "loc": {
          "description": "The encoded location of the map properties in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the map properties.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "mapKey": {
      "type": "object",
      "description": "Defines the allowed shape and constraints for keys in Map Properties.",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "MapKey" },
        "value": {
          "description": "The type definition for the map’s keys, which MAY be either a primitive or complex value.",
          "$ref": "#/definitions/memberValue"
        },
        "loc": {
          "description": "The encoded location of the map key in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the map key.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "mapValue": {
      "type": "object",
      "description": "Defines the allowed shape and constraints for values in Map Properties.",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "MapValue" },
        "value": {
          "description": "The type definition for the map’s values, which MAY be either a primitive or complex value.",
          "$ref": "#/definitions/memberValue"
        },
        "loc": {
          "description": "The encoded location of the map key in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the map key.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },

    "enum": {
      "type": "object",
      "description": "An Enum defines a named set of constant values that represent all valid options for a particular member value.",
      "required": ["kind", "name", "members"],
      "properties": {
        "kind": { "type": "string", "const": "Enum" },
        "name": {
          "description": "The name of the enum. This name MUST be unique within the Service across all other types, enums, and unions. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "description": "An array of strings that describe the enum. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "members": {
          "type": "array",
          "description": "An array of the constant values that make up the enum. Each member defines a single allowed value along with its optional description.",
          "items": { "$ref": "#/definitions/enumMember" },
          "minItems": 1
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the enum is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the enum in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the enum.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "enumMember": {
      "type": "object",
      "description": "Represents a single constant value within an enum.",
      "required": ["kind", "content"],
      "properties": {
        "kind": { "type": "string", "const": "EnumMember" },
        "content": {
          "description": "The constant value that represents the enum member. This value MUST be unique within the enum.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "description": "An array of strings that describe the enum member. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the enum member is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the enum member in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the enum member.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },

    "union": {
      "discriminator": {
        "propertyName": "kind"
      },
      "description": "A Union is a type that can be one of several different types. The `members` array contains the possible types that the Union can be.",
      "oneOf": [
        { "$ref": "#/definitions/simpleUnion" },
        { "$ref": "#/definitions/discriminatedUnion" }
      ]
    },
    "disjunctionKindLiteral": {
      "type": "object",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "DisjunctionKindLiteral" },
        "value": {
          "description": "In an inclusive disjunction, a value MUST fully match at least one union member and MAY also match others. In an exclusive disjunction, a value MUST fully match exactly one union member and MUST NOT match any others.",
          "$ref": "#/definitions/disjunctionKind"
        },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "disjunctionKind": {
      "type": "string",
      "enum": ["inclusive", "exclusive"]
    },
    "simpleUnion": {
      "type": "object",
      "required": ["kind", "name", "members"],
      "description": "A Simple Union defines a member value that may be one of several possible primitive or complex types, without any additional field to indicate which type is in use. Implementations must determine the actual type based on the value itself. Simple unions are typically used for cases where the set of possible types is small and easily distinguishable without an explicit discriminator.",
      "properties": {
        "kind": { "type": "string", "const": "SimpleUnion" },
        "name": {
          "description": "The name of the union. This name MUST be unique within the Service across all other types, enums, and unions. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "type": "array",
          "description": "An array of strings that describe the union. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "items": { "$ref": "#/definitions/string" }
        },
        "members": {
          "type": "array",
          "description": "An array of the possible member values that make up the union.",
          "items": { "$ref": "#/definitions/memberValue" },
          "minItems": 1
        },
        "disjunction": {
          "description": "Indicates whether the union’s members are inclusive or exclusive. In an inclusive disjunction, a value MUST fully match at least one member and MAY also match others. In an exclusive disjunction, a value MUST fully match exactly one member and MUST NOT match any others. If this value is not present, tooling SHOULD consider the union to be inclusive.",
          "$ref": "#/definitions/disjunctionKindLiteral"
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the union is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the union in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the union.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },
    "discriminatedUnion": {
      "type": "object",
      "required": ["kind", "name", "discriminator", "members"],
      "description": "A Discriminated Union defines a member value that may be one of several possible object types, with an explicit discriminator property whose value identifies which type is present. This approach allows implementations to unambiguously determine the type at runtime without inspecting the full structure of the value. Discriminated unions are commonly used when member types share overlapping shapes or when reliable deserialization across languages and tools is required.",
      "properties": {
        "kind": { "type": "string", "const": "DiscriminatedUnion" },
        "name": {
          "description": "The name of the union. This name MUST be unique within the Service across all other types, enums, and unions. This value MAY be represented in any casing. Generators MUST NOT assume any particular casing for this value and SHOULD represent it in a language-idiomatic way.",
          "$ref": "#/definitions/string"
        },
        "description": {
          "type": "array",
          "description": "An array of strings that describe the union. Each item in the array SHOULD be considered a separate paragraph. These values MAY include Markdown formatting.",
          "items": { "$ref": "#/definitions/string" }
        },
        "discriminator": {
          "description": "The name of the discriminator property. This property MUST exist in all union member types and MUST use identical casing across all of them.",
          "$ref": "#/definitions/string"
        },
        "members": {
          "type": "array",
          "description": "An array of the possible member values that make up the union.",
          "items": { "$ref": "#/definitions/complexValue" },
          "minItems": 1
        },
        "deprecated": {
          "description": "A boolean value that indicates whether the union is deprecated.",
          "$ref": "#/definitions/true"
        },
        "loc": {
          "description": "The encoded location of the union in the source document(s).",
          "$ref": "#/definitions/encodedRange"
        },
        "meta": {
          "description": "An array of metadata values for the union.",
          "$ref": "#/definitions/meta"
        }
      },
      "additionalProperties": false
    },

    "primitive": {
      "description": "The name of a primitive type.",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "long",
        "float",
        "double",
        "boolean",
        "date",
        "date-time",
        "null",
        "binary",
        "untyped"
      ]
    },
    "primitiveLiteral": {
      "type": "object",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "PrimitiveLiteral" },
        "value": { "$ref": "#/definitions/primitive" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "primitiveValue": {
      "type": "object",
      "description": "Represents a value whose type is one of the built-in primitives (such as string, number, boolean, or null). Unlike a complex value, a primitive value does not reference other types, enums, or unions—it directly describes a base data type.",
      "required": ["kind", "typeName", "rules"],
      "properties": {
        "kind": { "type": "string", "const": "PrimitiveValue" },
        "typeName": {
          "description": "The name of the primitive type.",
          "$ref": "#/definitions/primitiveLiteral"
        },
        "isArray": {
          "description": "A boolean value that indicates whether the value is an array.",
          "$ref": "#/definitions/true"
        },
        "isNullable": {
          "description": "Indicates whether the value MAY explicitly be set to `null`. When `true`, the type definition allows `null` as a valid value in addition to what is specified by `typeName`. Implementations MAY interpret `null` according to the closest equivalent in the target language or platform. (This differs from `isOptional`, where the value is not required to appear at all in the data structure or message.)",
          "$ref": "#/definitions/true"
        },
        "isOptional": {
          "description": "Indicates whether the value MAY be omitted entirely. When `true`, the value is not required to appear in the data structure or message. (This differs from `isNullable`, where the value is present but MAY explicitly be `null`.) If this value is not present, tooling MUST consider the value to be required.",
          "$ref": "#/definitions/true"
        },
        "constant": {
          "description": "A single, fixed allowed value. This value MUST be compatible with the type specified by `typeName`. When defined, this value is the only valid value for the field, and tooling or validation MUST reject any other value.",
          "oneOf": [
            { "$ref": "#/definitions/string" },
            { "$ref": "#/definitions/number" },
            { "$ref": "#/definitions/boolean" },
            { "$ref": "#/definitions/null" }
          ]
        },
        "default": {
          "description": "A value to be assumed or applied when none is provided. This value MUST be compatible with the type specified by `typeName`. A default does not restrict other valid values—it simply acts as the initial value when the field is omitted",
          "oneOf": [
            { "$ref": "#/definitions/string" },
            { "$ref": "#/definitions/number" },
            { "$ref": "#/definitions/boolean" },
            { "$ref": "#/definitions/null" }
          ]
        },
        "rules": {
          "description": "A set of constraints that apply to the value, such as limits on length, numeric range, or array size. These rules define additional validation beyond the basic type definition and are distinct from rules that apply to a containing type.",
          "type": "array",
          "items": { "$ref": "#/definitions/validationRule" }
        }
      }
    },
    "complexValue": {
      "type": "object",
      "description": "Represents a value whose type is defined elsewhere in the Service as a named type, enum, or union.",
      "required": ["kind", "typeName", "rules"],
      "properties": {
        "kind": { "type": "string", "const": "ComplexValue" },
        "typeName": {
          "description": "The name of a type, enum, or union defined in this Service. The casing MUST match the casing of the referenced type, enum, or union definition exactly.",
          "$ref": "#/definitions/string"
        },
        "isArray": {
          "description": "A boolean value that indicates whether the value is an array.",
          "$ref": "#/definitions/true"
        },
        "isNullable": {
          "description": "Indicates whether the value MAY explicitly be set to `null`. When `true`, the type definition allows `null` as a valid value in addition to what is specified by `typeName`. Implementations MAY interpret `null` according to the closest equivalent in the target language or platform. (This differs from `isOptional`, where the value is not required to appear at all in the data structure or message.)",
          "$ref": "#/definitions/true"
        },
        "isOptional": {
          "description": "Indicates whether the value MAY be omitted entirely. When `true`, the value is not required to appear in the data structure or message. (This differs from `isNullable`, where the value is present but MAY explicitly be `null`.) If this value is not present, tooling MUST consider the value to be required.",
          "$ref": "#/definitions/true"
        },
        "rules": {
          "description": "A set of constraints that apply to the value, such as limits on length, numeric range, or array size. These rules define additional validation beyond the basic type definition and are distinct from rules that apply to a containing type.",
          "type": "array",
          "items": { "$ref": "#/definitions/validationRule" }
        }
      }
    },
    "memberValue": {
      "discriminator": {
        "propertyName": "kind"
      },
      "oneOf": [
        { "$ref": "#/definitions/primitiveValue" },
        { "$ref": "#/definitions/complexValue" }
      ]
    },

    "protocols": {
      "type": "object",
      "required": ["kind"],
      "properties": {
        "kind": { "type": "string", "const": "InterfaceProtocols" },
        "http": {
          "type": "array",
          "items": { "$ref": "#/definitions/httpRoute" }
        }
      },
      "additionalProperties": false
    },
    "httpVerb": {
      "type": "string",
      "enum": [
        "get",
        "post",
        "put",
        "patch",
        "delete",
        "head",
        "options",
        "trace"
      ]
    },
    "httpStatusCodeLiteral": {
      "type": "object",
      "description": "Represents an HTTP status code as it appears in the original source document.",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "HttpStatusCodeLiteral" },
        "value": { "type": "integer", "minimum": 100, "maximum": 599 },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "httpVerbLiteral": {
      "type": "object",
      "required": ["kind", "value"],
      "description": "Represents an HTTP verb string as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "HttpVerbLiteral" },
        "value": {
          "description": "The HTTP verb as a lowercase string. Generators MAY represent this value in a language- or platform-idiomatic casing.",
          "$ref": "#/definitions/httpVerb"
        },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "httpLocation": {
      "type": "string",
      "enum": ["header", "query", "path", "formData", "body"]
    },
    "httpLocationLiteral": {
      "type": "object",
      "description": "Represents the location of an HTTP parameter as it appears in the original source document.",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "HttpLocationLiteral" },
        "value": { "$ref": "#/definitions/httpLocation" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "httpArrayFormat": {
      "type": "string",
      "description": "The format of an array in an HTTP request or response.",
      "enum": ["csv", "ssv", "tsv", "pipes", "multi"]
    },
    "httpArrayFormatLiteral": {
      "type": "object",
      "description": "Represents the format of an array in an HTTP request or response as it appears in the original source document.",
      "required": ["kind", "value"],
      "properties": {
        "kind": { "type": "string", "const": "HttpArrayFormatLiteral" },
        "value": { "$ref": "#/definitions/httpArrayFormat" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "httpRoute": {
      "type": "object",
      "required": ["kind", "pattern", "methods"],
      "properties": {
        "kind": { "type": "string", "const": "HttpRoute" },
        "pattern": { "$ref": "#/definitions/string" },
        "methods": {
          "type": "array",
          "items": { "$ref": "#/definitions/httpMethod" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "httpMethod": {
      "type": "object",
      "required": [
        "kind",
        "name",
        "verb",
        "parameters",
        "successCode",
        "requestMediaTypes",
        "responseMediaTypes"
      ],
      "properties": {
        "kind": { "type": "string", "const": "HttpMethod" },
        "name": { "$ref": "#/definitions/string" },
        "verb": { "$ref": "#/definitions/httpVerbLiteral" },
        "parameters": {
          "type": "array",
          "items": { "$ref": "#/definitions/httpParameter" }
        },
        "successCode": { "$ref": "#/definitions/httpStatusCodeLiteral" },
        "requestMediaTypes": {
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "responseMediaTypes": {
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "httpParameter": {
      "type": "object",
      "required": ["kind", "name", "location"],
      "properties": {
        "kind": { "type": "string", "const": "HttpParameter" },
        "name": { "$ref": "#/definitions/string" },
        "location": { "$ref": "#/definitions/httpLocationLiteral" },
        "arrayFormat": { "$ref": "#/definitions/httpArrayFormatLiteral" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },

    "securityOption": {
      "type": "object",
      "required": ["kind", "schemes"],
      "properties": {
        "kind": { "type": "string", "const": "SecurityOption" },
        "schemes": {
          "type": "array",
          "items": { "$ref": "#/definitions/securityScheme" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" }
      }
    },
    "securityScheme": {
      "discriminator": {
        "propertyName": "kind"
      },
      "oneOf": [
        { "$ref": "#/definitions/basicScheme" },
        { "$ref": "#/definitions/apiKeyScheme" },
        { "$ref": "#/definitions/oAuth2Scheme" }
      ]
    },
    "basicScheme": {
      "type": "object",
      "required": ["kind", "type", "name"],
      "properties": {
        "kind": { "type": "string", "const": "BasicScheme" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": {
              "type": "string",
              "const": "basic"
            },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "name": { "$ref": "#/definitions/string" },
        "description": { "$ref": "#/definitions/string" },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "apiKeyScheme": {
      "type": "object",
      "required": ["kind", "type", "name", "parameter", "in"],
      "properties": {
        "kind": { "type": "string", "const": "ApiKeyScheme" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": {
              "type": "string",
              "const": "apiKey"
            },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "name": { "$ref": "#/definitions/string" },
        "description": {
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "parameter": { "$ref": "#/definitions/string" },
        "in": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": {
              "type": "string",
              "enum": ["header", "query", "cookie"]
            },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "oAuth2Scheme": {
      "type": "object",
      "required": ["kind", "type", "name", "flows"],
      "properties": {
        "kind": { "type": "string", "const": "OAuth2Scheme" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": { "type": "string", "const": "oauth2" },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "name": { "$ref": "#/definitions/string" },
        "description": {
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "flows": {
          "type": "array",
          "items": { "$ref": "#/definitions/oAuth2Flow" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "oAuth2Flow": {
      "discriminator": {
        "propertyName": "kind"
      },
      "oneOf": [
        { "$ref": "#/definitions/oAuth2ImplicitFlow" },
        { "$ref": "#/definitions/oAuth2PasswordFlow" },
        { "$ref": "#/definitions/oAuth2ClientCredentialsFlow" },
        { "$ref": "#/definitions/oAuth2AuthorizationCodeFlow" }
      ]
    },
    "oAuth2ImplicitFlow": {
      "type": "object",
      "required": ["kind", "type", "authorizationUrl", "scopes"],
      "properties": {
        "kind": { "type": "string", "const": "OAuth2ImplicitFlow" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": { "type": "string", "const": "implicit" },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "authorizationUrl": { "$ref": "#/definitions/string" },
        "refreshUrl": { "$ref": "#/definitions/string" },
        "scopes": {
          "type": "array",
          "items": { "$ref": "#/definitions/oAuth2Scope" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "oAuth2PasswordFlow": {
      "type": "object",
      "required": ["kind", "type", "tokenUrl", "scopes"],
      "properties": {
        "kind": { "type": "string", "const": "OAuth2PasswordFlow" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": { "type": "string", "const": "password" },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "tokenUrl": { "$ref": "#/definitions/string" },
        "refreshUrl": { "$ref": "#/definitions/string" },
        "scopes": {
          "type": "array",
          "items": { "$ref": "#/definitions/oAuth2Scope" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "oAuth2ClientCredentialsFlow": {
      "type": "object",
      "required": ["kind", "type", "tokenUrl", "scopes"],
      "properties": {
        "kind": { "type": "string", "const": "OAuth2ClientCredentialsFlow" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": { "type": "string", "const": "clientCredentials" },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "tokenUrl": { "$ref": "#/definitions/string" },
        "refreshUrl": { "$ref": "#/definitions/string" },
        "scopes": {
          "type": "array",
          "items": { "$ref": "#/definitions/oAuth2Scope" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "oAuth2AuthorizationCodeFlow": {
      "type": "object",
      "required": ["kind", "type", "authorizationUrl", "tokenUrl", "scopes"],
      "properties": {
        "kind": { "type": "string", "const": "OAuth2AuthorizationCodeFlow" },
        "type": {
          "type": "object",
          "required": ["value"],
          "properties": {
            "value": { "type": "string", "const": "authorizationCode" },
            "loc": { "$ref": "#/definitions/encodedRange" }
          },
          "additionalProperties": false
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "authorizationUrl": { "$ref": "#/definitions/string" },
        "tokenUrl": { "$ref": "#/definitions/string" },
        "refreshUrl": { "$ref": "#/definitions/string" },
        "scopes": {
          "type": "array",
          "items": { "$ref": "#/definitions/oAuth2Scope" }
        },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },
    "oAuth2Scope": {
      "type": "object",
      "required": ["kind", "name", "description"],
      "properties": {
        "kind": { "type": "string", "const": "OAuth2Scope" },
        "name": { "$ref": "#/definitions/string" },
        "description": {
          "type": "array",
          "items": { "$ref": "#/definitions/string" }
        },
        "deprecated": { "$ref": "#/definitions/true" },
        "loc": { "$ref": "#/definitions/encodedRange" },
        "meta": { "$ref": "#/definitions/meta" }
      },
      "additionalProperties": false
    },

    "string": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "StringLiteral",
      "description": "Represents a string value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "StringLiteral" },
        "value": { "type": "string" },
        "loc": {
          "description": "The location of this in the doc.",
          "$ref": "#/definitions/encodedRange"
        }
      },
      "additionalProperties": false
    },
    "integer": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "IntegerLiteral",
      "description": "Represents an integer value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "IntegerLiteral" },
        "value": { "type": "integer" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "number": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "NumberLiteral",
      "description": "Represents a numeric value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "NumberLiteral" },
        "value": { "type": "integer" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "boolean": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "BooleanLiteral",
      "description": "Represents a boolean value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "BooleanLiteral" },
        "value": { "type": "boolean" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "null": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "NullLiteral",
      "description": "Represents a null value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "NullLiteral" },
        "value": { "type": "null" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "true": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "TrueLiteral",
      "description": "Represents a boolean `true` value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "TrueLiteral" },
        "value": { "type": "boolean", "const": true },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "nonEmptyString": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "NonEmptyStringLiteral",
      "description": "Represents a non-empty string value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "NonEmptyStringLiteral" },
        "value": { "type": "string", "minLength": 1 },
        "loc": {
          "description": "The location of this in the doc.",
          "$ref": "#/definitions/encodedRange"
        }
      },
      "additionalProperties": false
    },
    "nonNegativeInteger": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "NonNegativeIntegerLiteral",
      "description": "Represents a non-negative integer value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "NonNegativeIntegerLiteral" },
        "value": { "type": "integer", "minimum": 0, "multipleOf": 1 },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "nonNegativeNumber": {
      "type": "object",
      "required": ["kind", "value"],
      "title": "NonNegativeNumberLiteral",
      "description": "Represents a non-negative numeric value exactly as it appears in the original source document.",
      "properties": {
        "kind": { "type": "string", "const": "NonNegativeNumberLiteral" },
        "value": { "type": "number", "minimum": 0 },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },

    "encodedRange": {
      "description": "The encoded location of this node in the source document(s).",
      "type": "string",
      "pattern": "^(\\d+:)((\\d+;){2}(\\d+)|(\\d+;){4}(\\d+)|(\\d+;){5}(\\d+))$"
    },

    "validationRule": {
      "discriminator": {
        "propertyName": "id"
      },
      "description": "A validation rule.",
      "oneOf": [
        { "$ref": "#/definitions/stringMaxLengthRule" },
        { "$ref": "#/definitions/stringMinLengthRule" },
        { "$ref": "#/definitions/stringPatternRule" },
        { "$ref": "#/definitions/stringFormatRule" },
        { "$ref": "#/definitions/numberMultipleOfRule" },
        { "$ref": "#/definitions/numberGtRule" },
        { "$ref": "#/definitions/numberGteRule" },
        { "$ref": "#/definitions/numberLtRule" },
        { "$ref": "#/definitions/numberLteRule" },
        { "$ref": "#/definitions/arrayMaxItemsRule" },
        { "$ref": "#/definitions/arrayMinItemsRule" },
        { "$ref": "#/definitions/arrayUniqueItemsRule" }
      ]
    },
    "stringMaxLengthRule": {
      "title": "StringMaxLengthRule",
      "description": "A validation rule that specifies the maximum length of a string.",
      "type": "object",
      "required": ["kind", "id", "length"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "StringMaxLength"
        },
        "length": { "$ref": "#/definitions/nonNegativeInteger" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "stringMinLengthRule": {
      "title": "StringMinLengthRule",
      "description": "A validation rule that specifies the minimum length of a string.",
      "type": "object",
      "required": ["kind", "id", "length"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "StringMinLength"
        },
        "length": { "$ref": "#/definitions/nonNegativeInteger" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "stringPatternRule": {
      "title": "StringPatternRule",
      "description": "A validation rule that specifies a regular expression pattern that a string MUST match.",
      "type": "object",
      "required": ["kind", "id", "pattern"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "StringPattern"
        },
        "pattern": { "$ref": "#/definitions/nonEmptyString" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "stringFormatRule": {
      "title": "StringFormatRule",
      "description": "A validation rule that specifies a format that a string SHOULD conform to. This rule is distinct from `StringPattern` because it allows for additional named formats beyond regular expressions. Implementations SHOULD interpret the format according to the closest equivalent in the target language or platform.",
      "type": "object",
      "required": ["kind", "id", "format"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "StringFormat"
        },
        "format": { "$ref": "#/definitions/nonEmptyString" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "numberMultipleOfRule": {
      "title": "NumberMultipleOfRule",
      "description": "A validation rule that specifies a multiple of a number.",
      "type": "object",
      "required": ["kind", "id", "value"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "NumberMultipleOf"
        },
        "value": { "$ref": "#/definitions/nonNegativeNumber" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "numberGtRule": {
      "title": "NumberGtRule",
      "description": "A validation rule that specifies a number that MUST be greater than a given value.",
      "type": "object",
      "required": ["kind", "id", "value"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "NumberGT"
        },
        "value": { "$ref": "#/definitions/number" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "numberGteRule": {
      "title": "NumberGteRule",
      "description": "A validation rule that specifies a number that MUST be greater than or equal to a given value.",
      "type": "object",
      "required": ["kind", "id", "value"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "NumberGTE"
        },
        "value": { "$ref": "#/definitions/number" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "numberLtRule": {
      "title": "NumberLtRule",
      "description": "A validation rule that specifies a number that MUST be less than a given value.",
      "type": "object",
      "required": ["kind", "id", "value"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "NumberLT"
        },
        "value": { "$ref": "#/definitions/number" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "numberLteRule": {
      "title": "NumberLteRule",
      "description": "A validation rule that specifies a number that MUST be less than or equal to a given value.",
      "type": "object",
      "required": ["kind", "id", "value"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "NumberLTE"
        },
        "value": { "$ref": "#/definitions/number" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "arrayMaxItemsRule": {
      "title": "ArrayMaxItemsRule",
      "description": "A validation rule that specifies the maximum number of items in an array.",
      "type": "object",
      "required": ["kind", "id", "max"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "ArrayMaxItems"
        },
        "max": { "$ref": "#/definitions/nonNegativeInteger" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "arrayMinItemsRule": {
      "title": "ArrayMinItemsRule",
      "description": "A validation rule that specifies the minimum number of items in an array.",
      "type": "object",
      "required": ["kind", "id", "min"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "ArrayMinItems"
        },
        "min": { "$ref": "#/definitions/nonNegativeInteger" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "arrayUniqueItemsRule": {
      "title": "ArrayUniqueItemsRule",
      "description": "A validation rule that specifies that all items in an array MUST be unique.",
      "type": "object",
      "required": ["kind", "id", "required"],
      "properties": {
        "kind": { "type": "string", "const": "ValidationRule" },
        "id": {
          "type": "string",
          "const": "ArrayUniqueItems"
        },
        "required": {
          "type": "boolean"
        },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },

    "objectValidationRule": {
      "discriminator": {
        "propertyName": "id"
      },
      "oneOf": [
        { "$ref": "#/definitions/objectMinPropertiesRule" },
        { "$ref": "#/definitions/objectMaxPropertiesRule" },
        { "$ref": "#/definitions/objectAdditionalPropertiesRule" }
      ]
    },
    "objectMinPropertiesRule": {
      "title": "ObjectMinPropertiesRule",
      "description": "A validation rule that specifies the minimum number of properties on an object. This rule MAY be ignored by tooling if the object type does not define any Map Properties.",
      "type": "object",
      "required": ["kind", "id", "min"],
      "properties": {
        "kind": { "type": "string", "const": "ObjectValidationRule" },
        "id": {
          "type": "string",
          "const": "ObjectMinProperties"
        },
        "min": { "$ref": "#/definitions/nonNegativeInteger" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "objectMaxPropertiesRule": {
      "title": "ObjectMaxPropertiesRule",
      "description": "A validation rule that specifies the maximum number of properties on an object. This rule MAY be ignored by tooling if the object type does not define any Map Properties.",
      "type": "object",
      "required": ["kind", "id", "max"],
      "properties": {
        "kind": { "type": "string", "const": "ObjectValidationRule" },
        "id": {
          "type": "string",
          "const": "ObjectMaxProperties"
        },
        "max": { "$ref": "#/definitions/nonNegativeInteger" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    },
    "objectAdditionalPropertiesRule": {
      "title": "ObjectAdditionalPropertiesRule",
      "type": "object",
      "required": ["kind", "id", "forbidden"],
      "properties": {
        "kind": { "type": "string", "const": "ObjectValidationRule" },
        "id": {
          "type": "string",
          "const": "ObjectAdditionalProperties"
        },
        "forbidden": { "$ref": "#/definitions/true" },
        "loc": { "$ref": "#/definitions/encodedRange" }
      },
      "additionalProperties": false
    }
  }
}
